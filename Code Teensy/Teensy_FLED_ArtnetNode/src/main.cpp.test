/* ObjectFLED sample program showing how to use ObjectFLED.h with FastLEDs.  5
LED strings are configured to show blue-cylon lights and display show()
framerate based on 20 back-to-back calls.  Tested with FastLED 3.9.11 & 3.9.13.

When using FastLED with ObjectFLED.h,  an ordered array of pin numbers is passed
to the ObjectFLED instance along with the 2D array for all 5 strings, and show()
displays all strings at once. If strings are of varying length, then the 2D
array holds the largest string, and extra data in the array for shorter strings
is effectively ignored, even if sent to the string.

You can optionally define separate 1D arrays for varying size strings with a
separate ObjectFLED instance for each string.  With this approach, each string
has it's own show(), get/setBrightness(), get/setBalance(), overclock, custom
waveform timing, and color order.  */
#include <Arduino.h>
#include <FastLED.h>
#include <ObjectFLED.h> //must include this before FastLED.h

/*
const int numPins = 36;
const byte pinList[numPins] = {1,  2,  3,  4,  19, 20, 21, 22, 5,  6,
                               7,  8,  9,  10, 11, 12, 24, 25, 26, 27,
                               28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
                               38, 39, 40, 41, 13, 14}; // List of pins used for
                                                        // LED output
const int Led_for_one_strip = 108; // Number of LEDs per strip
const int Nb_string_strip = 1;     // Number of strips per pin
*/

#define PIX_PER_STR 108
#define NUM_STR 36
CRGB leds[NUM_STR][PIX_PER_STR]; // 2D array for all strings, or use separate
                                 // string arrays
// pin# 0-4, each with it's own LED string and array row
uint8_t pinList[NUM_STR] = {1,  2,  3,  4,  19, 20, 21, 22, 5,  6,  7,  8,
                            9,  10, 11, 12, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 13, 14};

ObjectFLED dispLeds(PIX_PER_STR *NUM_STR, leds, CORDER_GRBW, 36, pinList);

void setup() {
  digitalWrite(23, LOW); // turn on mosfet LED
  delay(5000);
  digitalWrite(23, HIGH); // turn on mosfet LED
  // begin(LED_CLK_nS, LED_T0H_nS, LED_T1H_nS, LED_Latch_Delay_uS) - specifies
  // full LED waveform timing.
  // TODO set the timing for the LED strip
  dispLeds.begin(1250, 250, 550, 80); // Utiliser ObjectFLED au lieu de OctoWS2811 pour les timings

  fill_solid(leds[0], NUM_STR * PIX_PER_STR, 0x0); // blanks all strings
  dispLeds.setBrightness(10);
  Serial.begin(115200);
  Serial.println("ObjectFLED FastLED test");
} // setup()

int delayT = 30;
void loop() {
  // RIGHT blue-cylon pattern on all NUM_STR strings
  Serial.print("show right blue-cylon\n");
  for (uint x = 0; x < PIX_PER_STR; x++) {
    for (uint y = 0; y < NUM_STR; y++) {
      leds[y][x] = CRGB::Blue;
    }
    dispLeds.show();
    fadeToBlackBy(leds[0], NUM_STR * PIX_PER_STR, 32);
    delay(delayT);
  }

  // LEFT blue-cylon pattern on all NUM_STR strings
  Serial.print("show left blue-cylon\n");
  for (int x = PIX_PER_STR - 1; x >= 0; x--) {
    for (int y = NUM_STR - 1; y >= 0; y--) {
      leds[y][x] = CRGB::Red;
    }
    dispLeds.show();
    fadeToBlackBy(leds[0], NUM_STR * PIX_PER_STR, 32);
    delay(delayT);
  }

  // speed test 20 show() calls
  uint totalT, startT = micros();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  dispLeds.show();
  totalT = micros() - startT;
  Serial.printf("Uses ObjectFLED Avg T of 20 :  %.1f uS  FPS:  %.1f\n",
                totalT / 20.0, 20.0 / totalT * 1000000);

} // loop()
